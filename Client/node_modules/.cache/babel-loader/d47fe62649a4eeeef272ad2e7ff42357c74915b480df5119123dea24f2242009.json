{"ast":null,"code":"var _jsxFileName = \"E:\\\\Code Reviewer\\\\Client\\\\src\\\\Components\\\\CollbrationComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-hot-toast\";\nimport Client from \"./Client\";\nimport CollbrationEditor from \"./CollbrationEditor\";\nimport { initSocket } from \"../socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CollbrationComponent() {\n  _s();\n  const socketRef = useRef(null);\n  const {\n    roomId\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    if (!location.state || !location.state.username) {\n      toast.error(\"Invalid access! Redirecting...\");\n      navigate(\"/\");\n      return;\n    }\n    const init = async () => {\n      try {\n        socketRef.current = await initSocket();\n\n        // Handle connection errors\n        const handleError = err => {\n          console.error(\"Socket connection error:\", err);\n          toast.error(\"Socket connection failed\");\n          navigate(\"/\");\n        };\n        socketRef.current.on(\"connect_error\", handleError);\n        socketRef.current.on(\"connect_failed\", handleError);\n        if (!roomId || !location.state.username) {\n          toast.error(\"Invalid room ID or username\");\n          navigate(\"/\");\n          return;\n        }\n        console.log(\"Joining room:\", roomId);\n        socketRef.current.emit(\"join\", {\n          roomId,\n          username: location.state.username\n        });\n        socketRef.current.on(\"joined\", _ref => {\n          let {\n            clients,\n            username,\n            socketId\n          } = _ref;\n          if (username !== location.state.username) {\n            toast.success(`${username} joined the room`);\n          }\n          setClients(clients);\n        });\n        return () => {\n          socketRef.current.disconnect();\n        };\n      } catch (error) {\n        console.error(\"Socket initialization failed:\", error);\n        toast.error(\"Unable to connect to the server\");\n        navigate(\"/\");\n      }\n    };\n    init();\n  }, [roomId, navigate, location.state]);\n  if (!location.state || !location.state.username) {\n    return null; // Prevents rendering if redirecting\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-12 gap-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/logo.webp\",\n        alt: \"logo\",\n        width: \"150px\",\n        height: \"50px\",\n        className: \"mx-auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"mt-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col overflow-auto h-[330px]\",\n        children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n          username: client.username\n        }, client.socketId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"border-none bg-green-600 p-2 text-white font-bold hover:bg-green-800 mt-2 rounded-lg\",\n        onClick: () => {\n          navigator.clipboard.writeText(roomId);\n          toast.success(\"Room ID copied!\");\n        },\n        children: \"Copy Room ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"border-none bg-red-600 p-2 text-white font-bold hover:bg-red-800 mt-2 rounded-lg\",\n        onClick: () => navigate(\"/\"),\n        children: \"Leave Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-span-10 flex flex-col h-screen bg-green-200 rounded-md p-2\",\n      children: /*#__PURE__*/_jsxDEV(CollbrationEditor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useEffect } from 'react'\n\n// import {useState} from 'react'\n// import Client from './Client'\n// import CollbrationEditor from './CollbrationEditor'\n// import { initSocket } from '../socket';\n// import { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\n// import { useRef } from 'react';\n// import {toast} from \"react-hot-toast\"\n\n// export default function CollbrationComponent() {\n//   const socketRef = useRef(null);\n//   const {roomId} = useParams();\n//   const location = useLocation();\n//   const Navigate = useNavigate();\n//   useEffect(()=>{\n//     const init = async () =>{\n//       socketRef.current = await initSocket();\n//       socketRef.current.on('connect_error', (err) => handleError(err));\n//       socketRef.current.on('connect_failed', (err) => handleError(err));\n\n//       const handleError=(e)=>{\n//         console.log(\"socket error =>\" ,e);\n//         toast.error(\"socket connection failed\");\n//         //Navigate(\"/\")\n//       }\n//        socketRef.current.emit('join',{\n//         roomId,\n//         username:location.state?.username,\n//        });\n//        socketRef.current.on(\"joined\", ({ clients, username,socketId})=>{\n//         if(username !== location.state?.username){\n//           toast.success(`${username} joined the room`);\n//         }\n//        });\n//     };\n//     init();\n//   },[]);\n//   const [clients,setClients] = useState([\n//     {socketId:1,username:\"yogesh\"},\n//     {socketId:2,username:\"rana bhagwan\"},\n//     {socketId:1,username:\"yogesh rana\"},\n//     {socketId:2,username:\"monika\"}\n//   ]);\n\n//   if(!location.state){\n//     return <Navigate to=\"/\"/>\n//   }\n//   return (\n//    <div className='grid grid-cols-12 gap-3'>\n\n//     {/* left pannel */}\n//    <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\n//      <img src=\"/images/logo.webp\" alt=\"logo\"  width=\"150px\" height=\"50px\" className='mx-auto'/>\n//      <hr className='mt-2 ' />\n\n//      {/* list of users */}\n//      <div className='flex flex-col overflow-auto h-[330px] '>\n//       {clients.map((client)=>(\n//         <Client key={client.socketId} username={client.username}/>\n//       ))}\n\n//      </div>\n\n//      {/* button  */}\n//      <hr  className='mb-2'/>\n//      <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>Copy Room ID</button>\n//      <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>Leave Room</button>\n\n//    </div>\n\n//    {/* right code editor pannel */}\n//    <div className='col-span-10  flex flex-col h-screen bg-green-200 rounded-md p-2'>\n//    <CollbrationEditor/>\n//      </div>\n\n//    </div>\n\n//   )\n// }\n_s(CollbrationComponent, \"l2xoQKaTJGjeKYunakvwhBdfrtM=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = CollbrationComponent;\nvar _c;\n$RefreshReg$(_c, \"CollbrationComponent\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","useLocation","useNavigate","toast","Client","CollbrationEditor","initSocket","jsxDEV","_jsxDEV","CollbrationComponent","_s","socketRef","roomId","location","navigate","clients","setClients","state","username","error","init","current","handleError","err","console","on","log","emit","_ref","socketId","success","disconnect","className","children","src","alt","width","height","fileName","_jsxFileName","lineNumber","columnNumber","map","client","onClick","navigator","clipboard","writeText","_c","$RefreshReg$"],"sources":["E:/Code Reviewer/Client/src/Components/CollbrationComponent.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport Client from \"./Client\";\r\nimport CollbrationEditor from \"./CollbrationEditor\";\r\nimport { initSocket } from \"../socket\";\r\n\r\nexport default function CollbrationComponent() {\r\n  const socketRef = useRef(null);\r\n  const { roomId } = useParams();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [clients, setClients] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!location.state || !location.state.username) {\r\n      toast.error(\"Invalid access! Redirecting...\");\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    const init = async () => {\r\n      try {\r\n        socketRef.current = await initSocket();\r\n\r\n        // Handle connection errors\r\n        const handleError = (err) => {\r\n          console.error(\"Socket connection error:\", err);\r\n          toast.error(\"Socket connection failed\");\r\n          navigate(\"/\");\r\n        };\r\n\r\n        socketRef.current.on(\"connect_error\", handleError);\r\n        socketRef.current.on(\"connect_failed\", handleError);\r\n\r\n        if (!roomId || !location.state.username) {\r\n          toast.error(\"Invalid room ID or username\");\r\n          navigate(\"/\");\r\n          return;\r\n        }\r\n\r\n        console.log(\"Joining room:\", roomId);\r\n        socketRef.current.emit(\"join\", { roomId, username: location.state.username });\r\n\r\n        socketRef.current.on(\"joined\", ({ clients, username, socketId }) => {\r\n          if (username !== location.state.username) {\r\n            toast.success(`${username} joined the room`);\r\n          }\r\n          setClients(clients);\r\n        });\r\n\r\n        return () => {\r\n          socketRef.current.disconnect();\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Socket initialization failed:\", error);\r\n        toast.error(\"Unable to connect to the server\");\r\n        navigate(\"/\");\r\n      }\r\n    };\r\n\r\n    init();\r\n  }, [roomId, navigate, location.state]);\r\n\r\n  if (!location.state || !location.state.username) {\r\n    return null; // Prevents rendering if redirecting\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-12 gap-3\">\r\n      {/* Left Panel */}\r\n      <div className=\"col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2\">\r\n        <img src=\"/images/logo.webp\" alt=\"logo\" width=\"150px\" height=\"50px\" className=\"mx-auto\" />\r\n        <hr className=\"mt-2\" />\r\n\r\n        {/* List of users */}\r\n        <div className=\"flex flex-col overflow-auto h-[330px]\">\r\n          {clients.map((client) => (\r\n            <Client key={client.socketId} username={client.username} />\r\n          ))}\r\n        </div>\r\n\r\n        {/* Buttons */}\r\n        <hr className=\"mb-2\" />\r\n        <button\r\n          className=\"border-none bg-green-600 p-2 text-white font-bold hover:bg-green-800 mt-2 rounded-lg\"\r\n          onClick={() => {\r\n            navigator.clipboard.writeText(roomId);\r\n            toast.success(\"Room ID copied!\");\r\n          }}\r\n        >\r\n          Copy Room ID\r\n        </button>\r\n        <button\r\n          className=\"border-none bg-red-600 p-2 text-white font-bold hover:bg-red-800 mt-2 rounded-lg\"\r\n          onClick={() => navigate(\"/\")}\r\n        >\r\n          Leave Room\r\n        </button>\r\n      </div>\r\n\r\n      {/* Right Panel (Code Editor) */}\r\n      <div className=\"col-span-10 flex flex-col h-screen bg-green-200 rounded-md p-2\">\r\n        <CollbrationEditor />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect } from 'react'\r\n\r\n// import {useState} from 'react'\r\n// import Client from './Client'\r\n// import CollbrationEditor from './CollbrationEditor'\r\n// import { initSocket } from '../socket';\r\n// import { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\r\n// import { useRef } from 'react';\r\n// import {toast} from \"react-hot-toast\"\r\n\r\n\r\n// export default function CollbrationComponent() {\r\n//   const socketRef = useRef(null);\r\n//   const {roomId} = useParams();\r\n//   const location = useLocation();\r\n//   const Navigate = useNavigate();\r\n//   useEffect(()=>{\r\n//     const init = async () =>{\r\n//       socketRef.current = await initSocket();\r\n//       socketRef.current.on('connect_error', (err) => handleError(err));\r\n//       socketRef.current.on('connect_failed', (err) => handleError(err));\r\n\r\n//       const handleError=(e)=>{\r\n//         console.log(\"socket error =>\" ,e);\r\n//         toast.error(\"socket connection failed\");\r\n//         //Navigate(\"/\")\r\n//       }\r\n//        socketRef.current.emit('join',{\r\n//         roomId,\r\n//         username:location.state?.username,\r\n//        });\r\n//        socketRef.current.on(\"joined\", ({ clients, username,socketId})=>{\r\n//         if(username !== location.state?.username){\r\n//           toast.success(`${username} joined the room`);\r\n//         }\r\n//        });\r\n//     };\r\n//     init();\r\n//   },[]);\r\n//   const [clients,setClients] = useState([\r\n//     {socketId:1,username:\"yogesh\"},\r\n//     {socketId:2,username:\"rana bhagwan\"},\r\n//     {socketId:1,username:\"yogesh rana\"},\r\n//     {socketId:2,username:\"monika\"}\r\n//   ]);\r\n\r\n//   if(!location.state){\r\n//     return <Navigate to=\"/\"/>\r\n//   }\r\n//   return (\r\n//    <div className='grid grid-cols-12 gap-3'>\r\n\r\n//     {/* left pannel */}\r\n//    <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\r\n//      <img src=\"/images/logo.webp\" alt=\"logo\"  width=\"150px\" height=\"50px\" className='mx-auto'/>\r\n//      <hr className='mt-2 ' />\r\n\r\n//      {/* list of users */}\r\n//      <div className='flex flex-col overflow-auto h-[330px] '>\r\n//       {clients.map((client)=>(\r\n//         <Client key={client.socketId} username={client.username}/>\r\n//       ))}\r\n  \r\n\r\n//      </div>\r\n\r\n//      {/* button  */}\r\n//      <hr  className='mb-2'/>\r\n//      <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>Copy Room ID</button>\r\n//      <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>Leave Room</button>\r\n\r\n\r\n//    </div>\r\n\r\n    \r\n//    {/* right code editor pannel */}\r\n//    <div className='col-span-10  flex flex-col h-screen bg-green-200 rounded-md p-2'>\r\n//    <CollbrationEditor/>\r\n//      </div>\r\n\r\n//    </div>\r\n   \r\n//   )\r\n// }\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}