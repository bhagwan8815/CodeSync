{"ast":null,"code":"\n\n// import React, { useEffect, useRef } from \"react\";\n// import \"codemirror/lib/codemirror.css\";\n// import \"codemirror/mode/javascript/javascript\";\n// import \"codemirror/theme/dracula.css\";\n// import \"codemirror/addon/edit/closetag\";\n// import \"codemirror/addon/edit/closebrackets\";\n// import CodeMirror from \"codemirror\";\n\n// export default function CollaborationEditor({ socketRef, roomId }) {\n//   const editorRef = useRef(null);\n//   const editorInstance = useRef(null); // Store the editor instance\n\n//   useEffect(() => {\n//     if (editorInstance.current) return; // Prevent multiple initializations\n\n//     if (editorRef.current) {\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\n//         mode: { name: \"javascript\", json: true },\n//         theme: \"dracula\",\n//         autoCloseTags: true,\n//         autoCloseBrackets: true,\n//         lineNumbers: true,\n//       });\n\n//       editorInstance.current.setSize(\"100%\", \"700px\");\n\n//       // Listen for editor changes\n//       editorInstance.current.on(\"change\", (instance, changes) => {\n//         const { origin } = changes;\n//         const code = instance.getValue();\n//         if (origin !== \"setValue\" && socketRef.current) {\n//           socketRef.current.emit(\"code-change\", {\n//             roomId,\n//             code,\n//           });\n//         }\n//       });\n\n//       // Register socket event\n//       const handleCodeChange = ({ code }) => {\n//         if (code !== null && editorInstance.current) {\n//           editorInstance.current.setValue(code);\n//         }\n//       };\n\n//       if (socketRef.current) {\n//         socketRef.current.off(\"code-change\", handleCodeChange); // Remove existing listener\n//         socketRef.current.on(\"code-change\", handleCodeChange);\n//       }\n//     }\n\n//     // Cleanup function to remove event listeners when unmounting\n//     return () => {\n//       if (socketRef.current) {\n//         socketRef.current.off(\"code-change\");\n//       }\n//     };\n//   }, [socketRef, roomId]);\n\n//   return (\n//     <div style={{ height: \"600px\" }}>\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useRef } from \"react\";\n// import \"codemirror/lib/codemirror.css\";\n// import \"codemirror/mode/javascript/javascript\";\n// import \"codemirror/theme/dracula.css\";\n// import \"codemirror/addon/edit/closetag\";\n// import \"codemirror/addon/edit/closebrackets\";\n// import CodeMirror from \"codemirror\";\n\n// export default function CollaborationEditor({socketRef , roomId}) {\n\n//   const editorRef = useRef(null);\n//   const editorInstance = useRef(null); // Store the editor instance\n\n//   useEffect(() => {\n//     if (editorInstance.current) return; // Prevent multiple initializations\n\n//     if (editorRef.current) {\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\n//         mode: { name: \"javascript\", json: true },\n//         theme: \"dracula\",\n//         autoCloseTags: true,\n//         autoCloseBrackets: true,\n//         lineNumbers: true,\n//       });\n\n//       editorInstance.current.setSize(\"100%\", \"700px\");\n//       editorInstance.current.on('change',(instance,changes)=>{\n//         //console.log(`changes` , instance , changes);\n//         const {origin} = changes;\n//         const code = instance.getValue();\n//         if(origin !== \"setValue\"){\n//           socketRef.current.emit(\"code-change\" , {\n//             roomId ,\n//             code,\n//           });\n//         }\n\n//       });\n//       // socketRef.current.on(\"code-change\",({code}) =>{\n//       //   if(code!==null){\n//       //     editorInstance.current.setValue(code);\n//       //   }\n//       // });\n\n//     };\n//   }, []);\n\n//   return (\n//     <div style={{ height: \"600px\" }}>\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\n//     </div>\n//   );\n// }\n\n//this is code before adding the features of collbrative code editor\n\n// import React, { useEffect, useRef } from \"react\";\n// import \"codemirror/lib/codemirror.css\";\n// import \"codemirror/mode/javascript/javascript\";\n// import \"codemirror/theme/dracula.css\";\n// import \"codemirror/addon/edit/closetag\";\n// import \"codemirror/addon/edit/closebrackets\";\n// import CodeMirror from \"codemirror\";\n\n// export default function CollaborationEditor() {\n\n//   const editorRef = useRef(null);\n//   const editorInstance = useRef(null); // Store the editor instance\n\n//   useEffect(() => {\n//     if (editorInstance.current) return; // Prevent multiple initializations\n\n//     if (editorRef.current) {\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\n//         mode: { name: \"javascript\", json: true },\n//         theme: \"dracula\",\n//         autoCloseTags: true,\n//         autoCloseBrackets: true,\n//         lineNumbers: true,\n//       });\n\n//       editorInstance.current.setSize(\"100%\", \"700px\");\n//     }\n//   }, []);\n\n//   return (\n//     <div style={{ height: \"600px\" }}>\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["E:/Code Reviewer/Client/src/Components/CollbrationEditor.jsx"],"sourcesContent":["\r\n\r\n\r\n// import React, { useEffect, useRef } from \"react\";\r\n// import \"codemirror/lib/codemirror.css\";\r\n// import \"codemirror/mode/javascript/javascript\";\r\n// import \"codemirror/theme/dracula.css\";\r\n// import \"codemirror/addon/edit/closetag\";\r\n// import \"codemirror/addon/edit/closebrackets\";\r\n// import CodeMirror from \"codemirror\";\r\n\r\n// export default function CollaborationEditor({ socketRef, roomId }) {\r\n//   const editorRef = useRef(null);\r\n//   const editorInstance = useRef(null); // Store the editor instance\r\n\r\n//   useEffect(() => {\r\n//     if (editorInstance.current) return; // Prevent multiple initializations\r\n\r\n//     if (editorRef.current) {\r\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\r\n//         mode: { name: \"javascript\", json: true },\r\n//         theme: \"dracula\",\r\n//         autoCloseTags: true,\r\n//         autoCloseBrackets: true,\r\n//         lineNumbers: true,\r\n//       });\r\n\r\n//       editorInstance.current.setSize(\"100%\", \"700px\");\r\n\r\n//       // Listen for editor changes\r\n//       editorInstance.current.on(\"change\", (instance, changes) => {\r\n//         const { origin } = changes;\r\n//         const code = instance.getValue();\r\n//         if (origin !== \"setValue\" && socketRef.current) {\r\n//           socketRef.current.emit(\"code-change\", {\r\n//             roomId,\r\n//             code,\r\n//           });\r\n//         }\r\n//       });\r\n\r\n//       // Register socket event\r\n//       const handleCodeChange = ({ code }) => {\r\n//         if (code !== null && editorInstance.current) {\r\n//           editorInstance.current.setValue(code);\r\n//         }\r\n//       };\r\n\r\n//       if (socketRef.current) {\r\n//         socketRef.current.off(\"code-change\", handleCodeChange); // Remove existing listener\r\n//         socketRef.current.on(\"code-change\", handleCodeChange);\r\n//       }\r\n//     }\r\n\r\n//     // Cleanup function to remove event listeners when unmounting\r\n//     return () => {\r\n//       if (socketRef.current) {\r\n//         socketRef.current.off(\"code-change\");\r\n//       }\r\n//     };\r\n//   }, [socketRef, roomId]);\r\n\r\n//   return (\r\n//     <div style={{ height: \"600px\" }}>\r\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n// import React, { useEffect, useRef } from \"react\";\r\n// import \"codemirror/lib/codemirror.css\";\r\n// import \"codemirror/mode/javascript/javascript\";\r\n// import \"codemirror/theme/dracula.css\";\r\n// import \"codemirror/addon/edit/closetag\";\r\n// import \"codemirror/addon/edit/closebrackets\";\r\n// import CodeMirror from \"codemirror\";\r\n\r\n// export default function CollaborationEditor({socketRef , roomId}) {\r\n\r\n//   const editorRef = useRef(null);\r\n//   const editorInstance = useRef(null); // Store the editor instance\r\n\r\n//   useEffect(() => {\r\n//     if (editorInstance.current) return; // Prevent multiple initializations\r\n\r\n//     if (editorRef.current) {\r\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\r\n//         mode: { name: \"javascript\", json: true },\r\n//         theme: \"dracula\",\r\n//         autoCloseTags: true,\r\n//         autoCloseBrackets: true,\r\n//         lineNumbers: true,\r\n//       });\r\n\r\n//       editorInstance.current.setSize(\"100%\", \"700px\");\r\n//       editorInstance.current.on('change',(instance,changes)=>{\r\n//         //console.log(`changes` , instance , changes);\r\n//         const {origin} = changes;\r\n//         const code = instance.getValue();\r\n//         if(origin !== \"setValue\"){\r\n//           socketRef.current.emit(\"code-change\" , {\r\n//             roomId ,\r\n//             code,\r\n//           });\r\n//         }\r\n\r\n//       });\r\n//       // socketRef.current.on(\"code-change\",({code}) =>{\r\n//       //   if(code!==null){\r\n//       //     editorInstance.current.setValue(code);\r\n//       //   }\r\n//       // });\r\n      \r\n//     };\r\n//   }, []);\r\n\r\n\r\n//   return (\r\n//     <div style={{ height: \"600px\" }}>\r\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//this is code before adding the features of collbrative code editor\r\n\r\n// import React, { useEffect, useRef } from \"react\";\r\n// import \"codemirror/lib/codemirror.css\";\r\n// import \"codemirror/mode/javascript/javascript\";\r\n// import \"codemirror/theme/dracula.css\";\r\n// import \"codemirror/addon/edit/closetag\";\r\n// import \"codemirror/addon/edit/closebrackets\";\r\n// import CodeMirror from \"codemirror\";\r\n\r\n// export default function CollaborationEditor() {\r\n\r\n//   const editorRef = useRef(null);\r\n//   const editorInstance = useRef(null); // Store the editor instance\r\n\r\n//   useEffect(() => {\r\n//     if (editorInstance.current) return; // Prevent multiple initializations\r\n\r\n//     if (editorRef.current) {\r\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\r\n//         mode: { name: \"javascript\", json: true },\r\n//         theme: \"dracula\",\r\n//         autoCloseTags: true,\r\n//         autoCloseBrackets: true,\r\n//         lineNumbers: true,\r\n//       });\r\n\r\n//       editorInstance.current.setSize(\"100%\", \"700px\");\r\n//     }\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div style={{ height: \"600px\" }}>\r\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}