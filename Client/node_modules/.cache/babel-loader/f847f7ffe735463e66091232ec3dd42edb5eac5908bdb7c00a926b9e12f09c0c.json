{"ast":null,"code":"var _jsxFileName = \"E:\\\\Code Reviewer\\\\Client\\\\src\\\\Components\\\\CollbrationComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useParams, useLocation, useNavigate, Navigate } from 'react-router-dom';\nimport { toast } from \"react-hot-toast\";\nimport { initSocket } from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CollaborationComponent() {\n  _s();\n  const socketRef = useRef(null);\n  const {\n    roomId\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const init = async () => {\n      try {\n        var _location$state;\n        socketRef.current = await initSocket();\n        const handleError = err => {\n          console.error(\"Socket connection error:\", err);\n          toast.error(\"Socket connection failed\");\n          navigate(\"/\");\n        };\n        socketRef.current.on('connect_error', handleError);\n        socketRef.current.on('connect_failed', handleError);\n        socketRef.current.emit('join', {\n          roomId,\n          username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username\n        });\n        socketRef.current.on(\"joined\", _ref => {\n          var _location$state2;\n          let {\n            clients,\n            username,\n            socketId\n          } = _ref;\n          if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n            toast.success(`${username} joined the room`);\n          }\n          setClients(clients);\n        });\n        return () => {\n          socketRef.current.disconnect();\n          socketRef.current.off(\"connect_error\", handleError);\n          socketRef.current.off(\"connect_failed\", handleError);\n        };\n      } catch (error) {\n        console.error(\"Socket initialization failed:\", error);\n        toast.error(\"Unable to connect to the server\");\n        navigate(\"/\");\n      }\n    };\n    init();\n  }, [roomId, navigate, location.state]);\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: clients.map(client => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: client.username\n      }, client.socketId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { useParams, useLocation, useNavigate, Navigate } from 'react-router-dom';\n// import { toast } from \"react-hot-toast\";\n// import { initSocket } from '../socket';\n// import Client from './Client';\n// import CollbrationEditor from './CollbrationEditor';\n\n// export default function CollbrationComponent() {\n//     const socketRef = useRef(null);\n//     const { roomId } = useParams();\n//     const location = useLocation();\n//     const navigate = useNavigate();\n//     const [clients, setClients] = useState([]);\n\n//     useEffect(() => {\n//         const init = async () => {\n//             try {\n//                 socketRef.current = await initSocket();\n\n//                 // Error handling should be added before any socket event is emitted\n//                 const handleError = (err) => {\n//                     console.log(\"Socket connection error:\", err);\n//                     toast.error(\"Socket connection failed\");\n//                     // navigate(\"/\");\n//                 };\n\n//                 socketRef.current.on('connect_error', handleError);\n//                 socketRef.current.on('connect_failed', handleError);\n\n//                 // Join room only after socket is connected\n//                 socketRef.current.emit('join', {\n//                     roomId,\n//                     username: location.state?.username,\n//                 });\n\n//                 socketRef.current.on(\"joined\", ({ clients, username, socketId }) => {\n//                     if (username !== location.state?.username) {\n//                         toast.success(`${username} joined the room`);\n//                     }\n//                     setClients(clients);\n//                 });\n\n//                 return () => {\n//                     socketRef.current.disconnect();\n//                     socketRef.current.off(\"connect_error\", handleError);\n//                     socketRef.current.off(\"connect_failed\", handleError);\n//                 };\n//             } catch (error) {\n//                 console.error(\"Socket initialization failed:\", error);\n//                 toast.error(\"Unable to connect to the server\");\n//                 navigate(\"/\");\n//             }\n//         };\n\n//         init();\n//     }, [roomId, navigate, location.state]);\n\n//     if (!location.state) {\n//         return <Navigate to=\"/\" />;\n//     }\n\n//     return (\n//         <div className='grid grid-cols-12 gap-3'>\n//             {/* Left Panel */}\n//             <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\n//                 <img src=\"/images/logo.webp\" alt=\"logo\" width=\"150px\" height=\"50px\" className='mx-auto' />\n//                 <hr className='mt-2 ' />\n\n//                 {/* List of users */}\n//                 <div className='flex flex-col overflow-auto h-[330px] '>\n//                     {clients.map((client) => (\n//                         <Client key={client.socketId} username={client.username} />\n//                     ))}\n//                 </div>\n\n//                 {/* Buttons */}\n//                 <hr className='mb-2' />\n//                 <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>\n//                     Copy Room ID\n//                 </button>\n//                 <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>\n//                     Leave Room\n//                 </button>\n//             </div>\n\n//             {/* Right Panel (Code Editor) */}\n//             <div className='col-span-10 flex flex-col h-screen bg-green-200 rounded-md p-2'>\n//                 <CollbrationEditor />\n//             </div>\n//         </div>\n//     );\n// }\n\n// import React, { useEffect } from 'react'\n\n// import {useState} from 'react'\n// import Client from './Client'\n// import CollbrationEditor from './CollbrationEditor'\n// import { initSocket } from '../socket';\n// import { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\n// import { useRef } from 'react';\n// import {toast} from \"react-hot-toast\"\n\n// export default function CollbrationComponent() {\n//   const socketRef = useRef(null);\n//   const {roomId} = useParams();\n//   const location = useLocation();\n//   const Navigate = useNavigate();\n//   useEffect(()=>{\n//     const init = async () =>{\n//       socketRef.current = await initSocket();\n//       socketRef.current.on('connect_error', (err) => handleError(err));\n//       socketRef.current.on('connect_failed', (err) => handleError(err));\n\n//       const handleError=(e)=>{\n//         console.log(\"socket error =>\" ,e);\n//         toast.error(\"socket connection failed\");\n//         Navigate(\"/\")\n//       }\n//        socketRef.current.emit('join',{\n//         roomId,\n//         username:location.state?.username,\n//        });\n//        socketRef.current.on(\"joined\", ({ clients, username,socketId})=>{\n//         if(username !== location.state?.username){\n//           toast.success(`${username} joined the room`);\n//         }\n//        });\n//     };\n//     init();\n//   },[]);\n//   const [clients,setClients] = useState([\n//     {socketId:1,username:\"yogesh\"},\n//     {socketId:2,username:\"rana bhagwan\"},\n//     {socketId:1,username:\"yogesh rana\"},\n//     {socketId:2,username:\"monika\"}\n//   ]);\n\n//   if(!location.state){\n//     return <Navigate to=\"/\"/>\n//   }\n//   return (\n//    <div className='grid grid-cols-12 gap-3'>\n\n//     {/* left pannel */}\n//    <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\n//      <img src=\"/images/logo.webp\" alt=\"logo\"  width=\"150px\" height=\"50px\" className='mx-auto'/>\n//      <hr className='mt-2 ' />\n\n//      {/* list of users */}\n//      <div className='flex flex-col overflow-auto h-[330px] '>\n//       {clients.map((client)=>(\n//         <Client key={client.socketId} username={client.username}/>\n//       ))}\n\n//      </div>\n\n//      {/* button  */}\n//      <hr  className='mb-2'/>\n//      <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>Copy Room ID</button>\n//      <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>Leave Room</button>\n\n//    </div>\n\n//    {/* right code editor pannel */}\n//    <div className='col-span-10  flex flex-col h-screen bg-green-200 rounded-md p-2'>\n//    <CollbrationEditor/>\n//      </div>\n\n//    </div>\n\n//   )\n// }\n_s(CollaborationComponent, \"l2xoQKaTJGjeKYunakvwhBdfrtM=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = CollaborationComponent;\nvar _c;\n$RefreshReg$(_c, \"CollaborationComponent\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","useLocation","useNavigate","Navigate","toast","initSocket","jsxDEV","_jsxDEV","CollaborationComponent","_s","socketRef","roomId","location","navigate","clients","setClients","init","_location$state","current","handleError","err","console","error","on","emit","username","state","_ref","_location$state2","socketId","success","disconnect","off","to","fileName","_jsxFileName","lineNumber","columnNumber","children","map","client","_c","$RefreshReg$"],"sources":["E:/Code Reviewer/Client/src/Components/CollbrationComponent.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useParams, useLocation, useNavigate, Navigate } from 'react-router-dom';\r\nimport { toast } from \"react-hot-toast\";\r\nimport { initSocket } from './socket';\r\n\r\nexport default function CollaborationComponent() {\r\n    const socketRef = useRef(null);\r\n    const { roomId } = useParams();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const [clients, setClients] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            try {\r\n                socketRef.current = await initSocket();\r\n\r\n                const handleError = (err) => {\r\n                    console.error(\"Socket connection error:\", err);\r\n                    toast.error(\"Socket connection failed\");\r\n                    navigate(\"/\");\r\n                };\r\n\r\n                socketRef.current.on('connect_error', handleError);\r\n                socketRef.current.on('connect_failed', handleError);\r\n\r\n                socketRef.current.emit('join', {\r\n                    roomId,\r\n                    username: location.state?.username,\r\n                });\r\n\r\n                socketRef.current.on(\"joined\", ({ clients, username, socketId }) => {\r\n                    if (username !== location.state?.username) {\r\n                        toast.success(`${username} joined the room`);\r\n                    }\r\n                    setClients(clients);\r\n                });\r\n\r\n                return () => {\r\n                    socketRef.current.disconnect();\r\n                    socketRef.current.off(\"connect_error\", handleError);\r\n                    socketRef.current.off(\"connect_failed\", handleError);\r\n                };\r\n            } catch (error) {\r\n                console.error(\"Socket initialization failed:\", error);\r\n                toast.error(\"Unable to connect to the server\");\r\n                navigate(\"/\");\r\n            }\r\n        };\r\n\r\n        init();\r\n    }, [roomId, navigate, location.state]);\r\n\r\n    if (!location.state) {\r\n        return <Navigate to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Room: {roomId}</h2>\r\n            <ul>\r\n                {clients.map((client) => (\r\n                    <li key={client.socketId}>{client.username}</li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// import React, { useEffect, useState, useRef } from 'react';\r\n// import { useParams, useLocation, useNavigate, Navigate } from 'react-router-dom';\r\n// import { toast } from \"react-hot-toast\";\r\n// import { initSocket } from '../socket';\r\n// import Client from './Client';\r\n// import CollbrationEditor from './CollbrationEditor';\r\n\r\n// export default function CollbrationComponent() {\r\n//     const socketRef = useRef(null);\r\n//     const { roomId } = useParams();\r\n//     const location = useLocation();\r\n//     const navigate = useNavigate();\r\n//     const [clients, setClients] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         const init = async () => {\r\n//             try {\r\n//                 socketRef.current = await initSocket();\r\n\r\n//                 // Error handling should be added before any socket event is emitted\r\n//                 const handleError = (err) => {\r\n//                     console.log(\"Socket connection error:\", err);\r\n//                     toast.error(\"Socket connection failed\");\r\n//                     // navigate(\"/\");\r\n//                 };\r\n\r\n//                 socketRef.current.on('connect_error', handleError);\r\n//                 socketRef.current.on('connect_failed', handleError);\r\n\r\n//                 // Join room only after socket is connected\r\n//                 socketRef.current.emit('join', {\r\n//                     roomId,\r\n//                     username: location.state?.username,\r\n//                 });\r\n\r\n//                 socketRef.current.on(\"joined\", ({ clients, username, socketId }) => {\r\n//                     if (username !== location.state?.username) {\r\n//                         toast.success(`${username} joined the room`);\r\n//                     }\r\n//                     setClients(clients);\r\n//                 });\r\n\r\n//                 return () => {\r\n//                     socketRef.current.disconnect();\r\n//                     socketRef.current.off(\"connect_error\", handleError);\r\n//                     socketRef.current.off(\"connect_failed\", handleError);\r\n//                 };\r\n//             } catch (error) {\r\n//                 console.error(\"Socket initialization failed:\", error);\r\n//                 toast.error(\"Unable to connect to the server\");\r\n//                 navigate(\"/\");\r\n//             }\r\n//         };\r\n\r\n//         init();\r\n//     }, [roomId, navigate, location.state]);\r\n\r\n//     if (!location.state) {\r\n//         return <Navigate to=\"/\" />;\r\n//     }\r\n\r\n//     return (\r\n//         <div className='grid grid-cols-12 gap-3'>\r\n//             {/* Left Panel */}\r\n//             <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\r\n//                 <img src=\"/images/logo.webp\" alt=\"logo\" width=\"150px\" height=\"50px\" className='mx-auto' />\r\n//                 <hr className='mt-2 ' />\r\n\r\n//                 {/* List of users */}\r\n//                 <div className='flex flex-col overflow-auto h-[330px] '>\r\n//                     {clients.map((client) => (\r\n//                         <Client key={client.socketId} username={client.username} />\r\n//                     ))}\r\n//                 </div>\r\n\r\n//                 {/* Buttons */}\r\n//                 <hr className='mb-2' />\r\n//                 <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>\r\n//                     Copy Room ID\r\n//                 </button>\r\n//                 <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>\r\n//                     Leave Room\r\n//                 </button>\r\n//             </div>\r\n\r\n//             {/* Right Panel (Code Editor) */}\r\n//             <div className='col-span-10 flex flex-col h-screen bg-green-200 rounded-md p-2'>\r\n//                 <CollbrationEditor />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n\r\n\r\n// import React, { useEffect } from 'react'\r\n\r\n// import {useState} from 'react'\r\n// import Client from './Client'\r\n// import CollbrationEditor from './CollbrationEditor'\r\n// import { initSocket } from '../socket';\r\n// import { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\r\n// import { useRef } from 'react';\r\n// import {toast} from \"react-hot-toast\"\r\n\r\n\r\n// export default function CollbrationComponent() {\r\n//   const socketRef = useRef(null);\r\n//   const {roomId} = useParams();\r\n//   const location = useLocation();\r\n//   const Navigate = useNavigate();\r\n//   useEffect(()=>{\r\n//     const init = async () =>{\r\n//       socketRef.current = await initSocket();\r\n//       socketRef.current.on('connect_error', (err) => handleError(err));\r\n//       socketRef.current.on('connect_failed', (err) => handleError(err));\r\n\r\n//       const handleError=(e)=>{\r\n//         console.log(\"socket error =>\" ,e);\r\n//         toast.error(\"socket connection failed\");\r\n//         Navigate(\"/\")\r\n//       }\r\n//        socketRef.current.emit('join',{\r\n//         roomId,\r\n//         username:location.state?.username,\r\n//        });\r\n//        socketRef.current.on(\"joined\", ({ clients, username,socketId})=>{\r\n//         if(username !== location.state?.username){\r\n//           toast.success(`${username} joined the room`);\r\n//         }\r\n//        });\r\n//     };\r\n//     init();\r\n//   },[]);\r\n//   const [clients,setClients] = useState([\r\n//     {socketId:1,username:\"yogesh\"},\r\n//     {socketId:2,username:\"rana bhagwan\"},\r\n//     {socketId:1,username:\"yogesh rana\"},\r\n//     {socketId:2,username:\"monika\"}\r\n//   ]);\r\n\r\n//   if(!location.state){\r\n//     return <Navigate to=\"/\"/>\r\n//   }\r\n//   return (\r\n//    <div className='grid grid-cols-12 gap-3'>\r\n\r\n//     {/* left pannel */}\r\n//    <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\r\n//      <img src=\"/images/logo.webp\" alt=\"logo\"  width=\"150px\" height=\"50px\" className='mx-auto'/>\r\n//      <hr className='mt-2 ' />\r\n\r\n//      {/* list of users */}\r\n//      <div className='flex flex-col overflow-auto h-[330px] '>\r\n//       {clients.map((client)=>(\r\n//         <Client key={client.socketId} username={client.username}/>\r\n//       ))}\r\n  \r\n\r\n//      </div>\r\n\r\n//      {/* button  */}\r\n//      <hr  className='mb-2'/>\r\n//      <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>Copy Room ID</button>\r\n//      <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>Leave Room</button>\r\n\r\n\r\n//    </div>\r\n\r\n    \r\n//    {/* right code editor pannel */}\r\n//    <div className='col-span-10  flex flex-col h-screen bg-green-200 rounded-md p-2'>\r\n//    <CollbrationEditor/>\r\n//      </div>\r\n\r\n//    </div>\r\n   \r\n//   )\r\n// }\r\n"],"mappings":"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Ed;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AAAA5B,EAAA,CApPwBD,sBAAsB;EAAA,QAEvBR,SAAS,EACXC,WAAW,EACXC,WAAW;AAAA;AAAAuC,EAAA,GAJRjC,sBAAsB;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}