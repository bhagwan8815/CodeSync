{"ast":null,"code":"var _jsxFileName = \"E:\\\\Code Reviewer\\\\Client\\\\src\\\\Components\\\\ThemeToggle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/theme/dracula.css\"; // Dark Theme\nimport \"codemirror/theme/eclipse.css\"; // Light Theme\nimport \"codemirror/addon/edit/closetag\";\nimport \"codemirror/addon/edit/closebrackets\";\nimport CodeMirror from \"codemirror\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CollaborationEditor(_ref) {\n  _s();\n  let {\n    socketRef,\n    roomId,\n    onCodeChange\n  } = _ref;\n  const editorRef = useRef(null);\n  const [theme, setTheme] = useState(localStorage.getItem(\"theme\") || \"light\"); // Get theme from localStorage\n\n  useEffect(() => {\n    const init = async () => {\n      const editor = CodeMirror.fromTextArea(document.getElementById(\"realTimeEditor\"), {\n        mode: {\n          name: \"javascript\",\n          json: true\n        },\n        theme: theme === \"dark\" ? \"dracula\" : \"eclipse\",\n        // Apply global theme\n        autoCloseTags: true,\n        autoCloseBrackets: true,\n        lineNumbers: true\n      });\n      editorRef.current = editor;\n      editor.setSize(null, \"100%\");\n      editorRef.current.on(\"change\", (instance, changes) => {\n        const {\n          origin\n        } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n        if (origin !== \"setValue\") {\n          socketRef.current.emit(\"code-change\", {\n            roomId,\n            code\n          });\n        }\n      });\n    };\n    init();\n  }, [theme]); // Reinitialize when theme changes\n\n  // Listen for global theme changes\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setTheme(localStorage.getItem(\"theme\") || \"light\");\n      if (editorRef.current) {\n        editorRef.current.setOption(\"theme\", localStorage.getItem(\"theme\") === \"dark\" ? \"dracula\" : \"eclipse\");\n      }\n    };\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, []);\n\n  // Listen for incoming code updates\n  useEffect(() => {\n    if (socketRef.current) {\n      socketRef.current.on(\"code-change\", _ref2 => {\n        let {\n          code\n        } = _ref2;\n        if (code !== null && editorRef.current) {\n          editorRef.current.setValue(code);\n        }\n      });\n    }\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.off(\"code-change\");\n      }\n    };\n  }, [socketRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `p-2 rounded-md ${theme === \"dark\" ? \"bg-gray-700\" : \"bg-gray-200\"}`,\n    style: {\n      height: \"600px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"realTimeEditor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n// import { useEffect, useState } from \"react\";\n\n// const ThemeToggle = ()=>{\n//     const[theme , setTheme] = useState(localStorage.getItem(\"theme\") || \"light\");\n\n//     useEffect(()=>{\n//         if(theme ===\"dark\"){\n//             document.documentElement.classList.add(\"dark\");\n\n//         }else{\n//             document.documentElement.classList.remove(\"dark\");\n//         }\n//         localStorage.setItem(\"theme\", theme);\n//     }, [theme]);\n\n//     return (\n//         <button onClick={() =>setTheme(theme===\"light\" ? \"dark\" :\"light\")}\n//         className=\"p-1 rounded bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white\">\n//              {theme === \"dark\" ? \"ðŸŒ™  \" : \"â˜€ \"}\n\n//         </button>\n//     );\n// };\n// export default ThemeToggle;\n_s(CollaborationEditor, \"WfaTImNpEAO1BYF1qt0i5bZObTc=\");\n_c = CollaborationEditor;\nvar _c;\n$RefreshReg$(_c, \"CollaborationEditor\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CodeMirror","jsxDEV","_jsxDEV","CollaborationEditor","_ref","_s","socketRef","roomId","onCodeChange","editorRef","theme","setTheme","localStorage","getItem","init","editor","fromTextArea","document","getElementById","mode","name","json","autoCloseTags","autoCloseBrackets","lineNumbers","current","setSize","on","instance","changes","origin","code","getValue","emit","handleStorageChange","setOption","window","addEventListener","removeEventListener","_ref2","setValue","off","className","style","height","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Code Reviewer/Client/src/Components/ThemeToggle.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/theme/dracula.css\"; // Dark Theme\r\nimport \"codemirror/theme/eclipse.css\"; // Light Theme\r\nimport \"codemirror/addon/edit/closetag\";\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport CodeMirror from \"codemirror\";\r\n\r\nexport default function CollaborationEditor({ socketRef, roomId, onCodeChange }) {\r\n  const editorRef = useRef(null);\r\n  const [theme, setTheme] = useState(localStorage.getItem(\"theme\") || \"light\"); // Get theme from localStorage\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      const editor = CodeMirror.fromTextArea(document.getElementById(\"realTimeEditor\"), {\r\n        mode: { name: \"javascript\", json: true },\r\n        theme: theme === \"dark\" ? \"dracula\" : \"eclipse\", // Apply global theme\r\n        autoCloseTags: true,\r\n        autoCloseBrackets: true,\r\n        lineNumbers: true,\r\n      });\r\n\r\n      editorRef.current = editor;\r\n      editor.setSize(null, \"100%\");\r\n\r\n      editorRef.current.on(\"change\", (instance, changes) => {\r\n        const { origin } = changes;\r\n        const code = instance.getValue();\r\n        onCodeChange(code);\r\n        if (origin !== \"setValue\") {\r\n          socketRef.current.emit(\"code-change\", {\r\n            roomId,\r\n            code,\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    init();\r\n  }, [theme]); // Reinitialize when theme changes\r\n\r\n  // Listen for global theme changes\r\n  useEffect(() => {\r\n    const handleStorageChange = () => {\r\n      setTheme(localStorage.getItem(\"theme\") || \"light\");\r\n      if (editorRef.current) {\r\n        editorRef.current.setOption(\"theme\", localStorage.getItem(\"theme\") === \"dark\" ? \"dracula\" : \"eclipse\");\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"storage\", handleStorageChange);\r\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\r\n  }, []);\r\n\r\n  // Listen for incoming code updates\r\n  useEffect(() => {\r\n    if (socketRef.current) {\r\n      socketRef.current.on(\"code-change\", ({ code }) => {\r\n        if (code !== null && editorRef.current) {\r\n          editorRef.current.setValue(code);\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.off(\"code-change\");\r\n      }\r\n    };\r\n  }, [socketRef]);\r\n\r\n  return (\r\n    <div className={`p-2 rounded-md ${theme === \"dark\" ? \"bg-gray-700\" : \"bg-gray-200\"}`} style={{ height: \"600px\" }}>\r\n      {/* Code Editor */}\r\n      <textarea id=\"realTimeEditor\"></textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useEffect, useState } from \"react\";\r\n\r\n// const ThemeToggle = ()=>{\r\n//     const[theme , setTheme] = useState(localStorage.getItem(\"theme\") || \"light\");\r\n\r\n//     useEffect(()=>{\r\n//         if(theme ===\"dark\"){\r\n//             document.documentElement.classList.add(\"dark\");\r\n\r\n//         }else{\r\n//             document.documentElement.classList.remove(\"dark\");\r\n//         }\r\n//         localStorage.setItem(\"theme\", theme);\r\n//     }, [theme]);\r\n\r\n//     return (\r\n//         <button onClick={() =>setTheme(theme===\"light\" ? \"dark\" :\"light\")}\r\n//         className=\"p-1 rounded bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white\">\r\n//              {theme === \"dark\" ? \"ðŸŒ™  \" : \"â˜€ \"}\r\n\r\n\r\n//         </button>\r\n//     );\r\n// };\r\n// export default ThemeToggle;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}