{"ast":null,"code":"\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { useParams, useLocation, useNavigate, Navigate } from 'react-router-dom';\n// import { toast } from \"react-hot-toast\";\n// import { initSocket } from '../socket';\n// import Client from './Client';\n// import CollbrationEditor from './CollbrationEditor';\n\n// export default function CollbrationComponent() {\n//     const socketRef = useRef(null);\n//     const { roomId } = useParams();\n//     const location = useLocation();\n//     const navigate = useNavigate();\n//     const [clients, setClients] = useState([]);\n\n//     useEffect(() => {\n//         const init = async () => {\n//             try {\n//                 socketRef.current = await initSocket();\n\n//                 // Error handling should be added before any socket event is emitted\n//                 const handleError = (err) => {\n//                     console.log(\"Socket connection error:\", err);\n//                     toast.error(\"Socket connection failed\");\n//                     // navigate(\"/\");\n//                 };\n\n//                 socketRef.current.on('connect_error', handleError);\n//                 socketRef.current.on('connect_failed', handleError);\n\n//                 // Join room only after socket is connected\n//                 socketRef.current.emit('join', {\n//                     roomId,\n//                     username: location.state?.username,\n//                 });\n\n//                 socketRef.current.on(\"joined\", ({ clients, username, socketId }) => {\n//                     if (username !== location.state?.username) {\n//                         toast.success(`${username} joined the room`);\n//                     }\n//                     setClients(clients);\n//                 });\n\n//                 return () => {\n//                     socketRef.current.disconnect();\n//                     socketRef.current.off(\"connect_error\", handleError);\n//                     socketRef.current.off(\"connect_failed\", handleError);\n//                 };\n//             } catch (error) {\n//                 console.error(\"Socket initialization failed:\", error);\n//                 toast.error(\"Unable to connect to the server\");\n//                 navigate(\"/\");\n//             }\n//         };\n\n//         init();\n//     }, [roomId, navigate, location.state]);\n\n//     if (!location.state) {\n//         return <Navigate to=\"/\" />;\n//     }\n\n//     return (\n//         <div className='grid grid-cols-12 gap-3'>\n//             {/* Left Panel */}\n//             <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\n//                 <img src=\"/images/logo.webp\" alt=\"logo\" width=\"150px\" height=\"50px\" className='mx-auto' />\n//                 <hr className='mt-2 ' />\n\n//                 {/* List of users */}\n//                 <div className='flex flex-col overflow-auto h-[330px] '>\n//                     {clients.map((client) => (\n//                         <Client key={client.socketId} username={client.username} />\n//                     ))}\n//                 </div>\n\n//                 {/* Buttons */}\n//                 <hr className='mb-2' />\n//                 <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>\n//                     Copy Room ID\n//                 </button>\n//                 <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>\n//                     Leave Room\n//                 </button>\n//             </div>\n\n//             {/* Right Panel (Code Editor) */}\n//             <div className='col-span-10 flex flex-col h-screen bg-green-200 rounded-md p-2'>\n//                 <CollbrationEditor />\n//             </div>\n//         </div>\n//     );\n// }\n\n// import React, { useEffect } from 'react'\n\n// import {useState} from 'react'\n// import Client from './Client'\n// import CollbrationEditor from './CollbrationEditor'\n// import { initSocket } from '../socket';\n// import { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\n// import { useRef } from 'react';\n// import {toast} from \"react-hot-toast\"\n\n// export default function CollbrationComponent() {\n//   const socketRef = useRef(null);\n//   const {roomId} = useParams();\n//   const location = useLocation();\n//   const Navigate = useNavigate();\n//   useEffect(()=>{\n//     const init = async () =>{\n//       socketRef.current = await initSocket();\n//       socketRef.current.on('connect_error', (err) => handleError(err));\n//       socketRef.current.on('connect_failed', (err) => handleError(err));\n\n//       const handleError=(e)=>{\n//         console.log(\"socket error =>\" ,e);\n//         toast.error(\"socket connection failed\");\n//         Navigate(\"/\")\n//       }\n//        socketRef.current.emit('join',{\n//         roomId,\n//         username:location.state?.username,\n//        });\n//        socketRef.current.on(\"joined\", ({ clients, username,socketId})=>{\n//         if(username !== location.state?.username){\n//           toast.success(`${username} joined the room`);\n//         }\n//        });\n//     };\n//     init();\n//   },[]);\n//   const [clients,setClients] = useState([\n//     {socketId:1,username:\"yogesh\"},\n//     {socketId:2,username:\"rana bhagwan\"},\n//     {socketId:1,username:\"yogesh rana\"},\n//     {socketId:2,username:\"monika\"}\n//   ]);\n\n//   if(!location.state){\n//     return <Navigate to=\"/\"/>\n//   }\n//   return (\n//    <div className='grid grid-cols-12 gap-3'>\n\n//     {/* left pannel */}\n//    <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\n//      <img src=\"/images/logo.webp\" alt=\"logo\"  width=\"150px\" height=\"50px\" className='mx-auto'/>\n//      <hr className='mt-2 ' />\n\n//      {/* list of users */}\n//      <div className='flex flex-col overflow-auto h-[330px] '>\n//       {clients.map((client)=>(\n//         <Client key={client.socketId} username={client.username}/>\n//       ))}\n\n//      </div>\n\n//      {/* button  */}\n//      <hr  className='mb-2'/>\n//      <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>Copy Room ID</button>\n//      <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>Leave Room</button>\n\n//    </div>\n\n//    {/* right code editor pannel */}\n//    <div className='col-span-10  flex flex-col h-screen bg-green-200 rounded-md p-2'>\n//    <CollbrationEditor/>\n//      </div>\n\n//    </div>\n\n//   )\n// }","map":{"version":3,"names":[],"sources":["E:/Code Reviewer/Client/src/Components/CollbrationComponent.jsx"],"sourcesContent":["\r\n\r\n// import React, { useEffect, useState, useRef } from 'react';\r\n// import { useParams, useLocation, useNavigate, Navigate } from 'react-router-dom';\r\n// import { toast } from \"react-hot-toast\";\r\n// import { initSocket } from '../socket';\r\n// import Client from './Client';\r\n// import CollbrationEditor from './CollbrationEditor';\r\n\r\n// export default function CollbrationComponent() {\r\n//     const socketRef = useRef(null);\r\n//     const { roomId } = useParams();\r\n//     const location = useLocation();\r\n//     const navigate = useNavigate();\r\n//     const [clients, setClients] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         const init = async () => {\r\n//             try {\r\n//                 socketRef.current = await initSocket();\r\n\r\n//                 // Error handling should be added before any socket event is emitted\r\n//                 const handleError = (err) => {\r\n//                     console.log(\"Socket connection error:\", err);\r\n//                     toast.error(\"Socket connection failed\");\r\n//                     // navigate(\"/\");\r\n//                 };\r\n\r\n//                 socketRef.current.on('connect_error', handleError);\r\n//                 socketRef.current.on('connect_failed', handleError);\r\n\r\n//                 // Join room only after socket is connected\r\n//                 socketRef.current.emit('join', {\r\n//                     roomId,\r\n//                     username: location.state?.username,\r\n//                 });\r\n\r\n//                 socketRef.current.on(\"joined\", ({ clients, username, socketId }) => {\r\n//                     if (username !== location.state?.username) {\r\n//                         toast.success(`${username} joined the room`);\r\n//                     }\r\n//                     setClients(clients);\r\n//                 });\r\n\r\n//                 return () => {\r\n//                     socketRef.current.disconnect();\r\n//                     socketRef.current.off(\"connect_error\", handleError);\r\n//                     socketRef.current.off(\"connect_failed\", handleError);\r\n//                 };\r\n//             } catch (error) {\r\n//                 console.error(\"Socket initialization failed:\", error);\r\n//                 toast.error(\"Unable to connect to the server\");\r\n//                 navigate(\"/\");\r\n//             }\r\n//         };\r\n\r\n//         init();\r\n//     }, [roomId, navigate, location.state]);\r\n\r\n//     if (!location.state) {\r\n//         return <Navigate to=\"/\" />;\r\n//     }\r\n\r\n//     return (\r\n//         <div className='grid grid-cols-12 gap-3'>\r\n//             {/* Left Panel */}\r\n//             <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\r\n//                 <img src=\"/images/logo.webp\" alt=\"logo\" width=\"150px\" height=\"50px\" className='mx-auto' />\r\n//                 <hr className='mt-2 ' />\r\n\r\n//                 {/* List of users */}\r\n//                 <div className='flex flex-col overflow-auto h-[330px] '>\r\n//                     {clients.map((client) => (\r\n//                         <Client key={client.socketId} username={client.username} />\r\n//                     ))}\r\n//                 </div>\r\n\r\n//                 {/* Buttons */}\r\n//                 <hr className='mb-2' />\r\n//                 <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>\r\n//                     Copy Room ID\r\n//                 </button>\r\n//                 <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>\r\n//                     Leave Room\r\n//                 </button>\r\n//             </div>\r\n\r\n//             {/* Right Panel (Code Editor) */}\r\n//             <div className='col-span-10 flex flex-col h-screen bg-green-200 rounded-md p-2'>\r\n//                 <CollbrationEditor />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n\r\n\r\n// import React, { useEffect } from 'react'\r\n\r\n// import {useState} from 'react'\r\n// import Client from './Client'\r\n// import CollbrationEditor from './CollbrationEditor'\r\n// import { initSocket } from '../socket';\r\n// import { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\r\n// import { useRef } from 'react';\r\n// import {toast} from \"react-hot-toast\"\r\n\r\n\r\n// export default function CollbrationComponent() {\r\n//   const socketRef = useRef(null);\r\n//   const {roomId} = useParams();\r\n//   const location = useLocation();\r\n//   const Navigate = useNavigate();\r\n//   useEffect(()=>{\r\n//     const init = async () =>{\r\n//       socketRef.current = await initSocket();\r\n//       socketRef.current.on('connect_error', (err) => handleError(err));\r\n//       socketRef.current.on('connect_failed', (err) => handleError(err));\r\n\r\n//       const handleError=(e)=>{\r\n//         console.log(\"socket error =>\" ,e);\r\n//         toast.error(\"socket connection failed\");\r\n//         Navigate(\"/\")\r\n//       }\r\n//        socketRef.current.emit('join',{\r\n//         roomId,\r\n//         username:location.state?.username,\r\n//        });\r\n//        socketRef.current.on(\"joined\", ({ clients, username,socketId})=>{\r\n//         if(username !== location.state?.username){\r\n//           toast.success(`${username} joined the room`);\r\n//         }\r\n//        });\r\n//     };\r\n//     init();\r\n//   },[]);\r\n//   const [clients,setClients] = useState([\r\n//     {socketId:1,username:\"yogesh\"},\r\n//     {socketId:2,username:\"rana bhagwan\"},\r\n//     {socketId:1,username:\"yogesh rana\"},\r\n//     {socketId:2,username:\"monika\"}\r\n//   ]);\r\n\r\n//   if(!location.state){\r\n//     return <Navigate to=\"/\"/>\r\n//   }\r\n//   return (\r\n//    <div className='grid grid-cols-12 gap-3'>\r\n\r\n//     {/* left pannel */}\r\n//    <div className='col-span-2 flex flex-col h-screen bg-red-300 rounded-md p-2'>\r\n//      <img src=\"/images/logo.webp\" alt=\"logo\"  width=\"150px\" height=\"50px\" className='mx-auto'/>\r\n//      <hr className='mt-2 ' />\r\n\r\n//      {/* list of users */}\r\n//      <div className='flex flex-col overflow-auto h-[330px] '>\r\n//       {clients.map((client)=>(\r\n//         <Client key={client.socketId} username={client.username}/>\r\n//       ))}\r\n  \r\n\r\n//      </div>\r\n\r\n//      {/* button  */}\r\n//      <hr  className='mb-2'/>\r\n//      <button className='border-none bg-green-600 p-2 text-white text-bold hover:bg-green-800 mt-2 rounded-lg'>Copy Room ID</button>\r\n//      <button className='border-none bg-red-600 p-2 text-white text-bold hover:bg-red-800 mt-2 rounded-lg'>Leave Room</button>\r\n\r\n\r\n//    </div>\r\n\r\n    \r\n//    {/* right code editor pannel */}\r\n//    <div className='col-span-10  flex flex-col h-screen bg-green-200 rounded-md p-2'>\r\n//    <CollbrationEditor/>\r\n//      </div>\r\n\r\n//    </div>\r\n   \r\n//   )\r\n// }\r\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}