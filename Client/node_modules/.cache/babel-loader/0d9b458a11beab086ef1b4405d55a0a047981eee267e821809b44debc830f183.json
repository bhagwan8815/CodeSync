{"ast":null,"code":"var _jsxFileName = \"E:\\\\Code Reviewer\\\\Client\\\\src\\\\Components\\\\CollbrationEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/theme/dracula.css\";\nimport \"codemirror/addon/edit/closetag\";\nimport \"codemirror/addon/edit/closebrackets\";\nimport CodeMirror from \"codemirror\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CollaborationEditor(_ref) {\n  _s();\n  let {\n    socketRef,\n    roomId\n  } = _ref;\n  const editorRef = useRef(null);\n  useEffect(() => {\n    const init = async () => {\n      const editor = CodeMirror.fromTextArea(document.getElementById(\"realTimeEditor\"), {\n        mode: {\n          name: \"javascript\",\n          json: true\n        },\n        theme: \"dracula\",\n        autoCloseTags: true,\n        autoCloseBrackets: true,\n        lineNumbers: true\n      });\n      editorRef.current = editor;\n      editor.setSize(null, \"100%\");\n      editorRef.current.on(\"change\", (instance, changes) => {\n        const {\n          r = origin\n        } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n        if (origin !== \"setValue\") {\n          socketRef.current.emit(\"code-change\", {\n            roomId,\n            code\n          });\n        }\n      });\n    };\n    init();\n  }, []);\n\n  //data receive from server \n  useEffect(() => {\n    if (socketRef.current) {\n      socketRef.current.on(\"code-changes\", _ref2 => {\n        let {\n          code\n        } = _ref2;\n        if (code !== null) {\n          editorRef.current.setVal;\n        }\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"600px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: editorRef,\n      id: \"realTimeEditor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useEffect, useRef } from \"react\";\n// import \"codemirror/lib/codemirror.css\";\n// import \"codemirror/mode/javascript/javascript\";\n// import \"codemirror/theme/dracula.css\";\n// import \"codemirror/addon/edit/closetag\";\n// import \"codemirror/addon/edit/closebrackets\";\n// import CodeMirror from \"codemirror\";\n\n// export default function CollaborationEditor({ socketRef, roomId }) {\n//   const editorRef = useRef(null);\n//   const editorInstance = useRef(null); // Store the editor instance\n\n//   useEffect(() => {\n//     if (editorInstance.current) return; // Prevent multiple initializations\n\n//     if (editorRef.current) {\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\n//         mode: { name: \"javascript\", json: true },\n//         theme: \"dracula\",\n//         autoCloseTags: true,\n//         autoCloseBrackets: true,\n//         lineNumbers: true,\n//       });\n\n//       editorInstance.current.setSize(\"100%\", \"700px\");\n\n//       // Listen for editor changes\n//       editorInstance.current.on(\"change\", (instance, changes) => {\n//         const { origin } = changes;\n//         const code = instance.getValue();\n//         if (origin !== \"setValue\" && socketRef.current) {\n//           socketRef.current.emit(\"code-change\", {\n//             roomId,\n//             code,\n//           });\n//         }\n//       });\n\n//       // Register socket event\n//       const handleCodeChange = ({ code }) => {\n//         if (code !== null && editorInstance.current) {\n//           editorInstance.current.setValue(code);\n//         }\n//       };\n\n//       if (socketRef.current) {\n//         socketRef.current.off(\"code-change\", handleCodeChange); // Remove existing listener\n//         socketRef.current.on(\"code-change\", handleCodeChange);\n//       }\n//     }\n\n//     // Cleanup function to remove event listeners when unmounting\n//     return () => {\n//       if (socketRef.current) {\n//         socketRef.current.off(\"code-change\");\n//       }\n//     };\n//   }, [socketRef, roomId]);\n\n//   return (\n//     <div style={{ height: \"600px\" }}>\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useRef } from \"react\";\n// import \"codemirror/lib/codemirror.css\";\n// import \"codemirror/mode/javascript/javascript\";\n// import \"codemirror/theme/dracula.css\";\n// import \"codemirror/addon/edit/closetag\";\n// import \"codemirror/addon/edit/closebrackets\";\n// import CodeMirror from \"codemirror\";\n\n// export default function CollaborationEditor({socketRef , roomId}) {\n\n//   const editorRef = useRef(null);\n//   const editorInstance = useRef(null); // Store the editor instance\n\n//   useEffect(() => {\n//     if (editorInstance.current) return; // Prevent multiple initializations\n\n//     if (editorRef.current) {\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\n//         mode: { name: \"javascript\", json: true },\n//         theme: \"dracula\",\n//         autoCloseTags: true,\n//         autoCloseBrackets: true,\n//         lineNumbers: true,\n//       });\n\n//       editorInstance.current.setSize(\"100%\", \"700px\");\n//       editorInstance.current.on('change',(instance,changes)=>{\n//         //console.log(`changes` , instance , changes);\n//         const {origin} = changes;\n//         const code = instance.getValue();\n//         if(origin !== \"setValue\"){\n//           socketRef.current.emit(\"code-change\" , {\n//             roomId ,\n//             code,\n//           });\n//         }\n\n//       });\n//       // socketRef.current.on(\"code-change\",({code}) =>{\n//       //   if(code!==null){\n//       //     editorInstance.current.setValue(code);\n//       //   }\n//       // });\n\n//     };\n//   }, []);\n\n//   return (\n//     <div style={{ height: \"600px\" }}>\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\n//     </div>\n//   );\n// }\n\n//this is code before adding the features of collbrative code editor\n\n// import React, { useEffect, useRef } from \"react\";\n// import \"codemirror/lib/codemirror.css\";\n// import \"codemirror/mode/javascript/javascript\";\n// import \"codemirror/theme/dracula.css\";\n// import \"codemirror/addon/edit/closetag\";\n// import \"codemirror/addon/edit/closebrackets\";\n// import CodeMirror from \"codemirror\";\n\n// export default function CollaborationEditor() {\n\n//   const editorRef = useRef(null);\n//   const editorInstance = useRef(null); // Store the editor instance\n\n//   useEffect(() => {\n//     if (editorInstance.current) return; // Prevent multiple initializations\n\n//     if (editorRef.current) {\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\n//         mode: { name: \"javascript\", json: true },\n//         theme: \"dracula\",\n//         autoCloseTags: true,\n//         autoCloseBrackets: true,\n//         lineNumbers: true,\n//       });\n\n//       editorInstance.current.setSize(\"100%\", \"700px\");\n//     }\n//   }, []);\n\n//   return (\n//     <div style={{ height: \"600px\" }}>\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\n//     </div>\n//   );\n// }\n_s(CollaborationEditor, \"ueqoO+5gVAT6IRBF08iN84bYr2g=\");\n_c = CollaborationEditor;\nvar _c;\n$RefreshReg$(_c, \"CollaborationEditor\");","map":{"version":3,"names":["React","useEffect","useRef","CodeMirror","jsxDEV","_jsxDEV","CollaborationEditor","_ref","_s","socketRef","roomId","editorRef","init","editor","fromTextArea","document","getElementById","mode","name","json","theme","autoCloseTags","autoCloseBrackets","lineNumbers","current","setSize","on","instance","changes","r","origin","code","getValue","onCodeChange","emit","_ref2","setVal","style","height","children","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Code Reviewer/Client/src/Components/CollbrationEditor.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/theme/dracula.css\";\r\nimport \"codemirror/addon/edit/closetag\";\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport CodeMirror from \"codemirror\";\r\n\r\nexport default function CollaborationEditor({ socketRef, roomId }) {\r\n  const editorRef = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const init = async () =>{\r\n      const editor = CodeMirror.fromTextArea(\r\n        document.getElementById(\"realTimeEditor\"),\r\n        {\r\n          mode: { name: \"javascript\", json: true },\r\n        theme: \"dracula\",\r\n        autoCloseTags: true,\r\n        autoCloseBrackets: true,\r\n        lineNumbers: true,\r\n        }\r\n      );\r\n      editorRef.current = editor;\r\n      editor.setSize(null, \"100%\");\r\n      editorRef.current.on(\"change\", (instance , changes)=>{\r\n        const {r=origin} = changes;\r\n        const code = instance.getValue();\r\n        onCodeChange(code);\r\n        if(origin !==\"setValue\"){\r\n          socketRef.current.emit(\"code-change\",{\r\n            roomId,\r\n            code\r\n          });\r\n        }\r\n      })\r\n    };\r\n\r\n    init();\r\n  },[]);\r\n\r\n  //data receive from server \r\n  useEffect(()=>{\r\n    if(socketRef.current){\r\n      socketRef.current.on(\"code-changes\",({code})=>{\r\n        if(code !==null){\r\n          editorRef.current.setVal\r\n        }\r\n      })\r\n    }\r\n  })\r\n  return (\r\n    <div style={{ height: \"600px\" }}>\r\n      <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n// import React, { useEffect, useRef } from \"react\";\r\n// import \"codemirror/lib/codemirror.css\";\r\n// import \"codemirror/mode/javascript/javascript\";\r\n// import \"codemirror/theme/dracula.css\";\r\n// import \"codemirror/addon/edit/closetag\";\r\n// import \"codemirror/addon/edit/closebrackets\";\r\n// import CodeMirror from \"codemirror\";\r\n\r\n// export default function CollaborationEditor({ socketRef, roomId }) {\r\n//   const editorRef = useRef(null);\r\n//   const editorInstance = useRef(null); // Store the editor instance\r\n\r\n//   useEffect(() => {\r\n//     if (editorInstance.current) return; // Prevent multiple initializations\r\n\r\n//     if (editorRef.current) {\r\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\r\n//         mode: { name: \"javascript\", json: true },\r\n//         theme: \"dracula\",\r\n//         autoCloseTags: true,\r\n//         autoCloseBrackets: true,\r\n//         lineNumbers: true,\r\n//       });\r\n\r\n//       editorInstance.current.setSize(\"100%\", \"700px\");\r\n\r\n//       // Listen for editor changes\r\n//       editorInstance.current.on(\"change\", (instance, changes) => {\r\n//         const { origin } = changes;\r\n//         const code = instance.getValue();\r\n//         if (origin !== \"setValue\" && socketRef.current) {\r\n//           socketRef.current.emit(\"code-change\", {\r\n//             roomId,\r\n//             code,\r\n//           });\r\n//         }\r\n//       });\r\n\r\n//       // Register socket event\r\n//       const handleCodeChange = ({ code }) => {\r\n//         if (code !== null && editorInstance.current) {\r\n//           editorInstance.current.setValue(code);\r\n//         }\r\n//       };\r\n\r\n//       if (socketRef.current) {\r\n//         socketRef.current.off(\"code-change\", handleCodeChange); // Remove existing listener\r\n//         socketRef.current.on(\"code-change\", handleCodeChange);\r\n//       }\r\n//     }\r\n\r\n//     // Cleanup function to remove event listeners when unmounting\r\n//     return () => {\r\n//       if (socketRef.current) {\r\n//         socketRef.current.off(\"code-change\");\r\n//       }\r\n//     };\r\n//   }, [socketRef, roomId]);\r\n\r\n//   return (\r\n//     <div style={{ height: \"600px\" }}>\r\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n// import React, { useEffect, useRef } from \"react\";\r\n// import \"codemirror/lib/codemirror.css\";\r\n// import \"codemirror/mode/javascript/javascript\";\r\n// import \"codemirror/theme/dracula.css\";\r\n// import \"codemirror/addon/edit/closetag\";\r\n// import \"codemirror/addon/edit/closebrackets\";\r\n// import CodeMirror from \"codemirror\";\r\n\r\n// export default function CollaborationEditor({socketRef , roomId}) {\r\n\r\n//   const editorRef = useRef(null);\r\n//   const editorInstance = useRef(null); // Store the editor instance\r\n\r\n//   useEffect(() => {\r\n//     if (editorInstance.current) return; // Prevent multiple initializations\r\n\r\n//     if (editorRef.current) {\r\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\r\n//         mode: { name: \"javascript\", json: true },\r\n//         theme: \"dracula\",\r\n//         autoCloseTags: true,\r\n//         autoCloseBrackets: true,\r\n//         lineNumbers: true,\r\n//       });\r\n\r\n//       editorInstance.current.setSize(\"100%\", \"700px\");\r\n//       editorInstance.current.on('change',(instance,changes)=>{\r\n//         //console.log(`changes` , instance , changes);\r\n//         const {origin} = changes;\r\n//         const code = instance.getValue();\r\n//         if(origin !== \"setValue\"){\r\n//           socketRef.current.emit(\"code-change\" , {\r\n//             roomId ,\r\n//             code,\r\n//           });\r\n//         }\r\n\r\n//       });\r\n//       // socketRef.current.on(\"code-change\",({code}) =>{\r\n//       //   if(code!==null){\r\n//       //     editorInstance.current.setValue(code);\r\n//       //   }\r\n//       // });\r\n      \r\n//     };\r\n//   }, []);\r\n\r\n\r\n//   return (\r\n//     <div style={{ height: \"600px\" }}>\r\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//this is code before adding the features of collbrative code editor\r\n\r\n// import React, { useEffect, useRef } from \"react\";\r\n// import \"codemirror/lib/codemirror.css\";\r\n// import \"codemirror/mode/javascript/javascript\";\r\n// import \"codemirror/theme/dracula.css\";\r\n// import \"codemirror/addon/edit/closetag\";\r\n// import \"codemirror/addon/edit/closebrackets\";\r\n// import CodeMirror from \"codemirror\";\r\n\r\n// export default function CollaborationEditor() {\r\n\r\n//   const editorRef = useRef(null);\r\n//   const editorInstance = useRef(null); // Store the editor instance\r\n\r\n//   useEffect(() => {\r\n//     if (editorInstance.current) return; // Prevent multiple initializations\r\n\r\n//     if (editorRef.current) {\r\n//       editorInstance.current = CodeMirror.fromTextArea(editorRef.current, {\r\n//         mode: { name: \"javascript\", json: true },\r\n//         theme: \"dracula\",\r\n//         autoCloseTags: true,\r\n//         autoCloseBrackets: true,\r\n//         lineNumbers: true,\r\n//       });\r\n\r\n//       editorInstance.current.setSize(\"100%\", \"700px\");\r\n//     }\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div style={{ height: \"600px\" }}>\r\n//       <textarea ref={editorRef} id=\"realTimeEditor\"></textarea>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,+BAA+B;AACtC,OAAO,uCAAuC;AAC9C,OAAO,8BAA8B;AACrC,OAAO,gCAAgC;AACvC,OAAO,qCAAqC;AAC5C,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,eAAe,SAASC,mBAAmBA,CAAAC,IAAA,EAAwB;EAAAC,EAAA;EAAA,IAAvB;IAAEC,SAAS;IAAEC;EAAO,CAAC,GAAAH,IAAA;EAC/D,MAAMI,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAG9BD,SAAS,CAAC,MAAM;IACd,MAAMW,IAAI,GAAG,MAAAA,CAAA,KAAW;MACtB,MAAMC,MAAM,GAAGV,UAAU,CAACW,YAAY,CACpCC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC,EACzC;QACEC,IAAI,EAAE;UAAEC,IAAI,EAAE,YAAY;UAAEC,IAAI,EAAE;QAAK,CAAC;QAC1CC,KAAK,EAAE,SAAS;QAChBC,aAAa,EAAE,IAAI;QACnBC,iBAAiB,EAAE,IAAI;QACvBC,WAAW,EAAE;MACb,CAAC,CACF;MACDZ,SAAS,CAACa,OAAO,GAAGX,MAAM;MAC1BA,MAAM,CAACY,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;MAC5Bd,SAAS,CAACa,OAAO,CAACE,EAAE,CAAC,QAAQ,EAAE,CAACC,QAAQ,EAAGC,OAAO,KAAG;QACnD,MAAM;UAACC,CAAC,GAACC;QAAM,CAAC,GAAGF,OAAO;QAC1B,MAAMG,IAAI,GAAGJ,QAAQ,CAACK,QAAQ,EAAE;QAChCC,YAAY,CAACF,IAAI,CAAC;QAClB,IAAGD,MAAM,KAAI,UAAU,EAAC;UACtBrB,SAAS,CAACe,OAAO,CAACU,IAAI,CAAC,aAAa,EAAC;YACnCxB,MAAM;YACNqB;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;IAEDnB,IAAI,EAAE;EACR,CAAC,EAAC,EAAE,CAAC;;EAEL;EACAX,SAAS,CAAC,MAAI;IACZ,IAAGQ,SAAS,CAACe,OAAO,EAAC;MACnBf,SAAS,CAACe,OAAO,CAACE,EAAE,CAAC,cAAc,EAACS,KAAA,IAAU;QAAA,IAAT;UAACJ;QAAI,CAAC,GAAAI,KAAA;QACzC,IAAGJ,IAAI,KAAI,IAAI,EAAC;UACdpB,SAAS,CAACa,OAAO,CAACY,MAAM;QAC1B;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,oBACE/B,OAAA;IAAKgC,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,eAC9BlC,OAAA;MAAUmC,GAAG,EAAE7B,SAAU;MAAC8B,EAAE,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAY;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACrD;AAEV;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAArC,EAAA,CAzNwBF,mBAAmB;AAAAwC,EAAA,GAAnBxC,mBAAmB;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}